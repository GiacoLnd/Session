security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        stagiaire_provider:
            entity:
                class: App\Entity\Stagiaire
                property: email

        formateur_provider:
            entity:
                class: App\Entity\Formateur
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        stagiaire:
            lazy: true
            provider: stagiaire_provider
            form_login:
                login_path: stagiaire_login
                check_path: stagiaire_login
                default_target_path: app_formation
                enable_csrf: true
            logout:
                path: stagiaire_logout
                # where to redirect after logout
                target: app_formation

        formateur:
            lazy: true
            provider: formateur_provider
            form_login:
                login_path: formateur_login
                check_path: formateur_login
                default_target_path: app_formation
                enable_csrf: true
            logout:
                path: formateur_logout
                # where to redirect after logout
                target: app_formation


    access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
